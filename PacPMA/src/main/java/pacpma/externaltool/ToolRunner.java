/****************************************************************************

    PacPMA - the PAC-based Parametric Model Analyzer
    Copyright (C) 2023

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 *****************************************************************************/

package pacpma.externaltool;

import java.io.IOException;
import java.util.List;

/**
 * Class to run an external tool and return its output as list of lines.
 * 
 * @author Andrea Turrini
 *
 */
public class ToolRunner {
    private static final String EOF = "EOF";
    
    private final List<String> command;
    private final List<String> messages;

    /**
     * Instantiates the runner for the external tool.
     * 
     * @param command
     *            the command to execute, with all its options as command line arguments
     * @param messages
     *            the messages to send to the command, as standard IO
     */
    public ToolRunner(List<String> command, List<String> messages) {
        this.command = command;
        this.messages = messages;
    }

    /**
     * Instantiates the runner for the external tool.
     * 
     * @param command
     *            the command to execute, with all its options as command line arguments
     */
   public ToolRunner(List<String> command) {
        this(command, null);
    }

    /**
     * Runs the external tool by executing the provided command.
     * 
     * @return the output generated by the external tool, or {@code null} if
     *         something went wrong
     */
    public List<String> run() {
        ProcessBuilder pb = new ProcessBuilder(command);
        pb.redirectErrorStream(true);
        Process modelCheckerProcess;
        try {
            modelCheckerProcess = pb.start();
        } catch (IOException e) {
            return null;
        }
        StreamGobbler modelCheckerOutput = new StreamGobbler(modelCheckerProcess.getInputStream());
        StreamFeeder modelCheckerInput = new StreamFeeder(modelCheckerProcess.getOutputStream(), messages, EOF);
        modelCheckerOutput.start();
        modelCheckerInput.start();

        while (true) {
            try {
                modelCheckerInput.join();
                modelCheckerProcess.waitFor();
                modelCheckerOutput.join();
            } catch (InterruptedException ie) {
                continue;
            }
            break;
        }
        return modelCheckerOutput.getLines();
    }
}
